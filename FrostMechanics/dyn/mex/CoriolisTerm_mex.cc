/*
 * Automatically Generated from Mathematica.
 * Wed 18 Dec 2019 16:27:18 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1560;
  double t1316;
  double t1321;
  double t1566;
  double t714;
  double t1518;
  double t1570;
  double t1571;
  double t1574;
  double t2032;
  double t4000;
  double t4377;
  double t4378;
  double t4383;
  double t4445;
  double t2085;
  double t2203;
  double t2348;
  double t7762;
  double t7765;
  double t7766;
  double t7767;
  double t7768;
  double t2349;
  double t2350;
  double t7687;
  double t7732;
  double t7740;
  double t7757;
  double t7769;
  double t7780;
  double t7786;
  double t7791;
  double t7800;
  double t7801;
  double t7802;
  double t7803;
  double t7810;
  double t7811;
  double t7812;
  double t7787;
  double t7788;
  double t7789;
  double t7813;
  double t7004;
  double t7814;
  double t7815;
  double t7836;
  double t7837;
  double t7841;
  double t7826;
  double t7827;
  double t7830;
  double t7849;
  double t7850;
  double t7851;
  double t7790;
  double t7793;
  double t7901;
  double t7902;
  double t7903;
  double t7905;
  double t7906;
  double t7907;
  double t7912;
  double t7913;
  double t7914;
  double t7816;
  double t7817;
  double t7818;
  double t7819;
  double t7820;
  double t7821;
  double t7822;
  double t7831;
  double t7832;
  double t7853;
  double t7854;
  double t7881;
  double t7882;
  double t7883;
  double t7889;
  double t7890;
  double t7891;
  double t7892;
  double t7904;
  double t7908;
  double t7909;
  double t7910;
  double t7911;
  double t7916;
  double t7920;
  double t7921;
  double t7922;
  double t7925;
  double t7926;
  double t7952;
  double t7953;
  double t7955;
  double t7957;
  double t7929;
  double t7978;
  double t7975;
  double t7976;
  double t7979;
  double t7977;
  double t7980;
  double t7981;
  double t7982;
  double t7989;
  double t7990;
  double t7991;
  double t7992;
  double t7993;
  double t7797;
  double t7807;
  double t7808;
  double t7983;
  double t7984;
  double t7985;
  double t7986;
  double t7987;
  double t8005;
  double t8006;
  double t8007;
  double t8008;
  double t8009;
  double t7845;
  double t7852;
  double t8001;
  double t8002;
  double t8003;
  double t8029;
  double t8030;
  double t8031;
  double t8017;
  double t8013;
  double t8014;
  double t8015;
  double t8016;
  double t8018;
  double t7858;
  double t7861;
  double t7862;
  double t7868;
  double t7871;
  double t7874;
  double t7875;
  double t7876;
  double t7878;
  double t8033;
  double t8034;
  double t8035;
  double t8037;
  double t8038;
  double t8040;
  double t8041;
  double t8042;
  double t7895;
  double t7896;
  double t7897;
  double t7898;
  double t7899;
  double t7900;
  double t8087;
  double t8088;
  double t8089;
  double t8091;
  double t8092;
  double t8093;
  double t8004;
  double t8010;
  double t8011;
  double t8012;
  double t8019;
  double t8020;
  double t8021;
  double t8022;
  double t8023;
  double t8024;
  double t8025;
  double t8106;
  double t8107;
  double t7940;
  double t7855;
  double t8027;
  double t8028;
  double t8032;
  double t8036;
  double t8039;
  double t8043;
  double t8044;
  double t8125;
  double t8126;
  double t7950;
  double t7893;
  double t8046;
  double t8047;
  double t8048;
  double t8049;
  double t8050;
  double t8051;
  double t8052;
  double t8053;
  double t8054;
  double t8055;
  double t8056;
  double t8057;
  double t8058;
  double t8059;
  double t8060;
  double t8061;
  double t8062;
  double t8063;
  double t8064;
  double t8065;
  double t8066;
  double t8067;
  double t8068;
  double t8069;
  double t8070;
  double t8071;
  double t8072;
  double t8073;
  double t8074;
  double t8075;
  double t8076;
  double t8136;
  double t8137;
  double t8138;
  double t8139;
  double t8140;
  double t8141;
  double t7995;
  double t8108;
  double t8109;
  double t8129;
  double t8144;
  double t8081;
  double t8082;
  double t8083;
  double t8084;
  double t8085;
  double t8086;
  double t8090;
  double t8094;
  double t8095;
  double t8097;
  double t8098;
  double t8099;
  double t8152;
  double t8153;
  double t8154;
  double t8110;
  double t8111;
  double t8112;
  double t8113;
  double t8114;
  double t8115;
  double t8116;
  double t8117;
  double t8118;
  double t8127;
  double t8142;
  double t8150;
  double t8151;
  double t8156;
  double t8160;
  double t8161;
  double t8174;
  double t8175;
  double t8177;
  double t8178;
  double t8164;
  double t7915;
  double t7917;
  double t7918;
  double t7919;
  double t7927;
  double t7928;
  double t7930;
  double t7931;
  double t7932;
  double t7954;
  double t7961;
  double t7962;
  double t7963;
  double t7964;
  double t7965;
  double t7966;
  double t7967;
  double t7971;
  double t8078;
  double t8079;
  double t8080;
  double t8096;
  double t8100;
  double t8101;
  double t8102;
  double t8155;
  double t8157;
  double t8158;
  double t8159;
  double t8162;
  double t8163;
  double t8165;
  double t8166;
  double t8167;
  double t8176;
  double t8179;
  double t8180;
  double t8181;
  double t8182;
  double t8183;
  double t8184;
  double t8185;
  double t8186;
  double t8202;
  double t8207;
  double t8208;
  double t8199;
  double t8209;
  double t8210;
  double t8211;
  double t8212;
  double t8213;
  double t8218;
  double t8219;
  double t8224;
  double t8226;
  double t8203;
  double t8204;
  double t8205;
  double t8217;
  double t8223;
  double t8250;
  double t8251;
  double t8252;
  double t8253;
  double t8274;
  double t8275;
  double t8233;
  double t8220;
  double t8255;
  double t8256;
  double t8257;
  double t8258;
  double t8259;
  double t8260;
  double t8287;
  double t8288;
  double t8133;
  double t8134;
  double t8135;
  double t8143;
  double t8145;
  double t8146;
  double t8244;
  double t8276;
  double t8277;
  double t8291;
  double t8266;
  double t8278;
  double t8279;
  double t8280;
  double t8289;
  double t8298;
  double t8300;
  double t8225;
  double t8227;
  double t8228;
  double t8236;
  double t8237;
  double t8238;
  double t8263;
  double t8264;
  double t8265;
  double t8267;
  double t8268;
  double t8269;
  double t8270;
  double t8299;
  double t8301;
  double t8302;
  double t8309;
  double t8310;
  double t8311;
  double t8343;
  double t8344;
  double t8345;
  double t8346;
  double t8327;
  double t8355;
  double t8356;
  double t8357;
  double t8358;
  double t8359;
  double t8335;
  double t8336;
  double t8337;
  double t8338;
  double t8385;
  double t8386;
  double t8387;
  double t8388;
  double t8424;
  double t8425;
  double t8426;
  double t8427;
  double t8428;
  double t8429;
  double t8430;
  double t8431;
  double t8330;
  double t8331;
  double t8332;
  double t8333;
  double t8380;
  double t8381;
  double t8382;
  double t8383;
  double t8396;
  double t8400;
  double t8406;
  double t8407;
  double t8408;
  double t8409;
  double t8410;
  double t8411;
  double t8412;
  double t8413;
  double t8414;
  double t8415;
  double t8416;
  double t8417;
  double t8418;
  double t8419;
  double t8420;
  double t8421;
  double t8422;
  double t8436;
  double t8437;
  double t8438;
  double t8439;
  double t8440;
  double t8441;
  double t8442;
  double t8443;
  double t8468;
  double t8469;
  double t8470;
  double t8471;
  double t8315;
  double t8316;
  double t8317;
  double t8318;
  double t8319;
  double t8190;
  double t8191;
  double t8192;
  double t8193;
  double t8194;
  double t8377;
  double t8480;
  double t8481;
  double t8482;
  double t8483;
  double t8484;
  double t8349;
  double t8350;
  double t8351;
  double t8366;
  double t8367;
  double t8368;
  double t8474;
  double t8475;
  double t8476;
  double t8493;
  double t8494;
  double t8495;
  double t8206;
  double t8214;
  double t8215;
  double t7809;
  double t7833;
  double t7834;
  double t8523;
  double t8524;
  double t8525;
  double t8397;
  double t8527;
  double t8528;
  double t8529;
  double t8451;
  double t8548;
  double t8549;
  double t8550;
  double t8551;
  double t8552;
  double t8531;
  double t8532;
  double t8533;
  double t8554;
  double t8555;
  double t8556;
  double t8557;
  double t8558;
  double t8569;
  double t8570;
  double t8571;
  double t8572;
  double t8573;
  double t8508;
  double t8509;
  double t8510;
  double t8360;
  double t8361;
  double t8326;
  double t8328;
  double t8197;
  double t8198;
  double t8200;
  double t8513;
  double t8514;
  double t8608;
  double t8609;
  double t2354;
  double t5243;
  double t7672;
  double t8542;
  double t8622;
  double t8623;
  double t8624;
  double t8544;
  double t8545;
  double t8562;
  double t8626;
  double t8627;
  double t8628;
  double t8564;
  double t8565;
  double t8641;
  double t8630;
  double t8631;
  double t8632;
  double t8633;
  double t8634;
  double t8643;
  double t8644;
  double t8645;
  double t8653;
  double t8654;
  double t8655;
  double t8273;
  double t8281;
  double t8282;
  double t8105;
  double t8119;
  double t8120;
  double t8687;
  double t8688;
  double t8689;
  double t8401;
  double t8691;
  double t8692;
  double t8693;
  double t8454;
  double t8712;
  double t8713;
  double t8714;
  double t8715;
  double t8716;
  double t8695;
  double t8696;
  double t8697;
  double t8718;
  double t8719;
  double t8720;
  double t8721;
  double t8722;
  double t8733;
  double t8734;
  double t8735;
  double t8736;
  double t8737;
  double t8672;
  double t8673;
  double t8674;
  double t8485;
  double t8486;
  double t8376;
  double t8378;
  double t8242;
  double t8243;
  double t8245;
  double t8677;
  double t8678;
  double t8772;
  double t8773;
  double t7988;
  double t7994;
  double t7996;
  double t8706;
  double t8786;
  double t8787;
  double t8788;
  double t8708;
  double t8709;
  double t8726;
  double t8790;
  double t8791;
  double t8792;
  double t8728;
  double t8729;
  double t8805;
  double t8794;
  double t8795;
  double t8796;
  double t8797;
  double t8798;
  double t8807;
  double t8808;
  double t8809;
  double t8817;
  double t8818;
  double t8819;
  t1560 = Cos(var1[3]);
  t1316 = Cos(var1[4]);
  t1321 = Sin(var1[3]);
  t1566 = Sin(var1[4]);
  t714 = Cos(var1[2]);
  t1518 = -1.*t1316*t1321;
  t1570 = -1.*t1560*t1566;
  t1571 = t1518 + t1570;
  t1574 = t714*t1571;
  t2032 = Sin(var1[2]);
  t4000 = -1.*t1560*t1316;
  t4377 = t1321*t1566;
  t4378 = t4000 + t4377;
  t4383 = t2032*t4378;
  t4445 = t1574 + t4383;
  t2085 = t1560*t1316;
  t2203 = -1.*t1321*t1566;
  t2348 = t2085 + t2203;
  t7762 = -1.*t1316;
  t7765 = 1. + t7762;
  t7766 = -0.4*t7765;
  t7767 = -0.64*t1316;
  t7768 = t7766 + t7767;
  t2349 = -1.*t2032*t2348;
  t2350 = t1574 + t2349;
  t7687 = -1.*t1560*t2032;
  t7732 = -1.*t714*t1321;
  t7740 = t7687 + t7732;
  t7757 = -0.748*t7740;
  t7769 = t7768*t1566;
  t7780 = 0.24*t1316*t1566;
  t7786 = t7769 + t7780;
  t7791 = t714*t2348;
  t7800 = t7768*t1316;
  t7801 = Power(t1566,2);
  t7802 = -0.24*t7801;
  t7803 = t7800 + t7802;
  t7810 = t2032*t1571;
  t7811 = t7810 + t7791;
  t7812 = 3.2*t7786*t7811;
  t7787 = t1316*t1321;
  t7788 = t1560*t1566;
  t7789 = t7787 + t7788;
  t7813 = 3.2*t7803*t4445;
  t7004 = 0.384*var2[4]*t4445;
  t7814 = t7757 + t7812 + t7813;
  t7815 = -0.5*var2[3]*t7814;
  t7836 = t714*t1560;
  t7837 = -1.*t2032*t1321;
  t7841 = t7836 + t7837;
  t7826 = t714*t7789;
  t7827 = t2032*t2348;
  t7830 = t7826 + t7827;
  t7849 = t1560*t2032;
  t7850 = t714*t1321;
  t7851 = t7849 + t7850;
  t7790 = -1.*t2032*t7789;
  t7793 = t7790 + t7791;
  t7901 = t7768*t1321;
  t7902 = -0.24*t1560*t1566;
  t7903 = t7901 + t7902;
  t7905 = t1560*t7768;
  t7906 = 0.24*t1321*t1566;
  t7907 = t7905 + t7906;
  t7912 = -1.*t7768*t1321;
  t7913 = 0.24*t1560*t1566;
  t7914 = t7912 + t7913;
  t7816 = -1.*t7768*t1566;
  t7817 = -0.24*t1316*t1566;
  t7818 = t7816 + t7817;
  t7819 = 3.2*t7818*t7811;
  t7820 = Power(t1316,2);
  t7821 = 0.24*t7820;
  t7822 = t7800 + t7821;
  t7831 = 3.2*t7822*t7830;
  t7832 = t7819 + t7812 + t7831 + t7813;
  t7853 = 6.4*t7811*t7830;
  t7854 = 6.4*t7811*t4445;
  t7881 = 3.2*t7811*t7793;
  t7882 = 3.2*t2350*t7830;
  t7883 = -1.*t2032*t1571;
  t7889 = t714*t4378;
  t7890 = t7883 + t7889;
  t7891 = 3.2*t7811*t7890;
  t7892 = 3.2*t2350*t4445;
  t7904 = -1.*t7903*t2348;
  t7908 = -1.*t1571*t7907;
  t7909 = t7904 + t7908;
  t7910 = 3.2*t7811*t7909;
  t7911 = t7903*t2348;
  t7916 = t1571*t7907;
  t7920 = t7903*t7789;
  t7921 = t2348*t7907;
  t7922 = t7920 + t7921;
  t7925 = 3.2*t7922*t4445;
  t7926 = -1.*t1571*t7903;
  t7952 = 0.24*t1316*t1321;
  t7953 = t7952 + t7913;
  t7955 = -0.24*t1560*t1316;
  t7957 = t7955 + t7906;
  t7929 = -1.*t7907*t4378;
  t7978 = Cos(var1[5]);
  t7975 = Cos(var1[6]);
  t7976 = Sin(var1[5]);
  t7979 = Sin(var1[6]);
  t7977 = -1.*t7975*t7976;
  t7980 = -1.*t7978*t7979;
  t7981 = t7977 + t7980;
  t7982 = t714*t7981;
  t7989 = -1.*t7978*t7975;
  t7990 = t7976*t7979;
  t7991 = t7989 + t7990;
  t7992 = t2032*t7991;
  t7993 = t7982 + t7992;
  t7797 = 3.2*t7786*t7793;
  t7807 = 3.2*t7803*t2350;
  t7808 = t7757 + t7797 + t7807;
  t7983 = t7978*t7975;
  t7984 = -1.*t7976*t7979;
  t7985 = t7983 + t7984;
  t7986 = -1.*t2032*t7985;
  t7987 = t7982 + t7986;
  t8005 = -1.*t7975;
  t8006 = 1. + t8005;
  t8007 = -0.4*t8006;
  t8008 = -0.64*t7975;
  t8009 = t8007 + t8008;
  t7845 = 13.6*t7740*t7841;
  t7852 = 13.6*t7851*t7841;
  t8001 = -1.*t7978*t2032;
  t8002 = -1.*t714*t7976;
  t8003 = t8001 + t8002;
  t8029 = t714*t7978;
  t8030 = -1.*t2032*t7976;
  t8031 = t8029 + t8030;
  t8017 = t714*t7985;
  t8013 = t7975*t7976;
  t8014 = t7978*t7979;
  t8015 = t8013 + t8014;
  t8016 = -1.*t2032*t8015;
  t8018 = t8016 + t8017;
  t7858 = Power(t7740,2);
  t7861 = 6.8*t7858;
  t7862 = 6.8*t7740*t7851;
  t7868 = Power(t7841,2);
  t7871 = 6.8*t7868;
  t7874 = -1.*t714*t1560;
  t7875 = t2032*t1321;
  t7876 = t7874 + t7875;
  t7878 = 6.8*t7841*t7876;
  t8033 = t7978*t2032;
  t8034 = t714*t7976;
  t8035 = t8033 + t8034;
  t8037 = t2032*t7981;
  t8038 = t8037 + t8017;
  t8040 = t714*t8015;
  t8041 = t2032*t7985;
  t8042 = t8040 + t8041;
  t7895 = Power(t1560,2);
  t7896 = -0.11*t7895;
  t7897 = Power(t1321,2);
  t7898 = -0.11*t7897;
  t7899 = t7896 + t7898;
  t7900 = 6.8*t7740*t7899;
  t8087 = t8009*t7976;
  t8088 = -0.24*t7978*t7979;
  t8089 = t8087 + t8088;
  t8091 = t7978*t8009;
  t8092 = 0.24*t7976*t7979;
  t8093 = t8091 + t8092;
  t8004 = -0.748*t8003;
  t8010 = t8009*t7979;
  t8011 = 0.24*t7975*t7979;
  t8012 = t8010 + t8011;
  t8019 = 3.2*t8012*t8018;
  t8020 = t8009*t7975;
  t8021 = Power(t7979,2);
  t8022 = -0.24*t8021;
  t8023 = t8020 + t8022;
  t8024 = 3.2*t8023*t7987;
  t8025 = t8004 + t8019 + t8024;
  t8106 = 3.2*t8012*t8038;
  t8107 = 3.2*t8023*t7993;
  t7940 = t7853 + t7854;
  t7855 = t7845 + t7852 + t7853 + t7854;
  t8027 = 6.4*t7811*t2350;
  t8028 = 6.4*t7793*t7830;
  t8032 = 13.6*t8003*t8031;
  t8036 = 13.6*t8035*t8031;
  t8039 = 6.4*t8038*t7987;
  t8043 = 6.4*t8018*t8042;
  t8044 = t7845 + t7852 + t8027 + t8028 + t8032 + t8036 + t8039 + t8043;
  t8125 = 6.4*t8038*t8042;
  t8126 = 6.4*t8038*t7993;
  t7950 = t7881 + t7882 + t7891 + t7892;
  t7893 = t7861 + t7862 + t7871 + t7878 + t7881 + t7882 + t7891 + t7892;
  t8046 = -1.*t714*t2348;
  t8047 = t7883 + t8046;
  t8048 = 3.2*t8047*t7811;
  t8049 = Power(t7793,2);
  t8050 = 3.2*t8049;
  t8051 = Power(t2350,2);
  t8052 = 3.2*t8051;
  t8053 = -1.*t714*t7789;
  t8054 = t8053 + t2349;
  t8055 = 3.2*t8054*t7830;
  t8056 = Power(t8003,2);
  t8057 = 6.8*t8056;
  t8058 = 6.8*t8003*t8035;
  t8059 = Power(t8031,2);
  t8060 = 6.8*t8059;
  t8061 = -1.*t714*t7978;
  t8062 = t2032*t7976;
  t8063 = t8061 + t8062;
  t8064 = 6.8*t8031*t8063;
  t8065 = -1.*t2032*t7981;
  t8066 = -1.*t714*t7985;
  t8067 = t8065 + t8066;
  t8068 = 3.2*t8067*t8038;
  t8069 = Power(t8018,2);
  t8070 = 3.2*t8069;
  t8071 = Power(t7987,2);
  t8072 = 3.2*t8071;
  t8073 = -1.*t714*t8015;
  t8074 = t8073 + t7986;
  t8075 = 3.2*t8074*t8042;
  t8076 = t7861 + t7862 + t7871 + t7878 + t8048 + t8050 + t8052 + t8055 + t8057 + t8058 + t8060 + t8064 + t8068 + t8070 + t8072 + t8075;
  t8136 = 3.2*t8038*t8018;
  t8137 = 3.2*t7987*t8042;
  t8138 = t714*t7991;
  t8139 = t8065 + t8138;
  t8140 = 3.2*t8038*t8139;
  t8141 = 3.2*t7987*t7993;
  t7995 = 0.384*var2[6]*t7993;
  t8108 = t8004 + t8106 + t8107;
  t8109 = -0.5*var2[5]*t8108;
  t8129 = t8032 + t8036 + t8125 + t8126;
  t8144 = t8057 + t8058 + t8060 + t8064 + t8136 + t8137 + t8140 + t8141;
  t8081 = Power(t7978,2);
  t8082 = -0.11*t8081;
  t8083 = Power(t7976,2);
  t8084 = -0.11*t8083;
  t8085 = t8082 + t8084;
  t8086 = 6.8*t8003*t8085;
  t8090 = -1.*t8089*t7985;
  t8094 = -1.*t7981*t8093;
  t8095 = t8090 + t8094;
  t8097 = t8089*t8015;
  t8098 = t7985*t8093;
  t8099 = t8097 + t8098;
  t8152 = -1.*t8009*t7976;
  t8153 = 0.24*t7978*t7979;
  t8154 = t8152 + t8153;
  t8110 = -1.*t8009*t7979;
  t8111 = -0.24*t7975*t7979;
  t8112 = t8110 + t8111;
  t8113 = 3.2*t8112*t8038;
  t8114 = Power(t7975,2);
  t8115 = 0.24*t8114;
  t8116 = t8020 + t8115;
  t8117 = 3.2*t8116*t8042;
  t8118 = t8113 + t8106 + t8117 + t8107;
  t8127 = t8125 + t8126;
  t8142 = t8136 + t8137 + t8140 + t8141;
  t8150 = 3.2*t8038*t8095;
  t8151 = t8089*t7985;
  t8156 = t7981*t8093;
  t8160 = 3.2*t8099*t7993;
  t8161 = -1.*t7981*t8089;
  t8174 = 0.24*t7975*t7976;
  t8175 = t8174 + t8153;
  t8177 = -0.24*t7978*t7975;
  t8178 = t8177 + t8092;
  t8164 = -1.*t8093*t7991;
  t7915 = t7914*t2348;
  t7917 = t7789*t7907;
  t7918 = t7911 + t7915 + t7916 + t7917;
  t7919 = 3.2*t7811*t7918;
  t7927 = -1.*t1571*t7914;
  t7928 = -1.*t2348*t7907;
  t7930 = t7926 + t7927 + t7928 + t7929;
  t7931 = 3.2*t7830*t7930;
  t7932 = t7900 + t7910 + t7919 + t7925 + t7931;
  t7954 = t7953*t2348;
  t7961 = t7789*t7957;
  t7962 = t7911 + t7954 + t7916 + t7961;
  t7963 = 3.2*t7811*t7962;
  t7964 = -1.*t1571*t7953;
  t7965 = -1.*t2348*t7957;
  t7966 = t7926 + t7964 + t7965 + t7929;
  t7967 = 3.2*t7830*t7966;
  t7971 = t7910 + t7963 + t7925 + t7967;
  t8078 = -2.88*t2032;
  t8079 = 3.2*t7793*t7909;
  t8080 = 3.2*t2350*t7922;
  t8096 = 3.2*t8018*t8095;
  t8100 = 3.2*t7987*t8099;
  t8101 = t8078 + t7900 + t8079 + t8080 + t8086 + t8096 + t8100;
  t8102 = -0.5*var2[2]*t8101;
  t8155 = t8154*t7985;
  t8157 = t8015*t8093;
  t8158 = t8151 + t8155 + t8156 + t8157;
  t8159 = 3.2*t8038*t8158;
  t8162 = -1.*t7981*t8154;
  t8163 = -1.*t7985*t8093;
  t8165 = t8161 + t8162 + t8163 + t8164;
  t8166 = 3.2*t8042*t8165;
  t8167 = t8086 + t8150 + t8159 + t8160 + t8166;
  t8176 = t8175*t7985;
  t8179 = t8015*t8178;
  t8180 = t8151 + t8176 + t8156 + t8179;
  t8181 = 3.2*t8038*t8180;
  t8182 = -1.*t7981*t8175;
  t8183 = -1.*t7985*t8178;
  t8184 = t8161 + t8182 + t8183 + t8164;
  t8185 = 3.2*t8042*t8184;
  t8186 = t8150 + t8181 + t8160 + t8185;
  t8202 = -0.748*t7876;
  t8207 = 3.2*t7786*t2350;
  t8208 = 3.2*t7803*t7890;
  t8199 = 0.384*var2[4]*t7890;
  t8209 = t8202 + t8207 + t8208;
  t8210 = -0.5*var2[3]*t8209;
  t8211 = 3.2*t7822*t7793;
  t8212 = 3.2*t7818*t2350;
  t8213 = t8211 + t8212 + t8207 + t8208;
  t8218 = 6.4*t7793*t2350;
  t8219 = 6.4*t2350*t7890;
  t8224 = 3.2*t2350*t7909;
  t8226 = 3.2*t7922*t7890;
  t8203 = 3.2*t7803*t8047;
  t8204 = 3.2*t7786*t8054;
  t8205 = t8202 + t8203 + t8204;
  t8217 = 13.6*t7740*t7876;
  t8223 = 6.8*t7876*t7899;
  t8250 = -0.748*t8063;
  t8251 = 3.2*t8023*t8067;
  t8252 = 3.2*t8012*t8074;
  t8253 = t8250 + t8251 + t8252;
  t8274 = 3.2*t8012*t7987;
  t8275 = 3.2*t8023*t8139;
  t8233 = t8218 + t8219;
  t8220 = t7845 + t8217 + t8218 + t8219;
  t8255 = 6.4*t8047*t2350;
  t8256 = 6.4*t7793*t8054;
  t8257 = 13.6*t8003*t8063;
  t8258 = 6.4*t8067*t7987;
  t8259 = 6.4*t8018*t8074;
  t8260 = t7845 + t8217 + t8255 + t8256 + t8032 + t8257 + t8258 + t8259;
  t8287 = 6.4*t8018*t7987;
  t8288 = 6.4*t7987*t8139;
  t8133 = -0.5*var2[4]*t7950;
  t8134 = -0.5*var2[3]*t7893;
  t8135 = -0.5*var2[2]*t8076;
  t8143 = -0.5*var2[6]*t8142;
  t8145 = -0.5*var2[5]*t8144;
  t8146 = t8133 + t8134 + t8135 + t8143 + t8145;
  t8244 = 0.384*var2[6]*t8139;
  t8276 = t8250 + t8274 + t8275;
  t8277 = -0.5*var2[5]*t8276;
  t8291 = t8032 + t8257 + t8287 + t8288;
  t8266 = 6.8*t8063*t8085;
  t8278 = 3.2*t8116*t8018;
  t8279 = 3.2*t8112*t7987;
  t8280 = t8278 + t8279 + t8274 + t8275;
  t8289 = t8287 + t8288;
  t8298 = 3.2*t7987*t8095;
  t8300 = 3.2*t8099*t8139;
  t8225 = 3.2*t2350*t7918;
  t8227 = 3.2*t7793*t7930;
  t8228 = t8223 + t8224 + t8225 + t8226 + t8227;
  t8236 = 3.2*t2350*t7962;
  t8237 = 3.2*t7793*t7966;
  t8238 = t8224 + t8236 + t8226 + t8237;
  t8263 = -2.88*t714;
  t8264 = 3.2*t8054*t7909;
  t8265 = 3.2*t8047*t7922;
  t8267 = 3.2*t8074*t8095;
  t8268 = 3.2*t8067*t8099;
  t8269 = t8263 + t8223 + t8264 + t8265 + t8266 + t8267 + t8268;
  t8270 = -0.5*var2[2]*t8269;
  t8299 = 3.2*t7987*t8158;
  t8301 = 3.2*t8018*t8165;
  t8302 = t8266 + t8298 + t8299 + t8300 + t8301;
  t8309 = 3.2*t7987*t8180;
  t8310 = 3.2*t8018*t8184;
  t8311 = t8298 + t8309 + t8300 + t8310;
  t8343 = 3.2*t7803*t7918;
  t8344 = 3.2*t7786*t7930;
  t8345 = t8343 + t8344;
  t8346 = -0.5*var2[3]*t8345;
  t8327 = 0.384*var2[4]*t7962;
  t8355 = 3.2*t7822*t7909;
  t8356 = 3.2*t7818*t7922;
  t8357 = 3.2*t7803*t7962;
  t8358 = 3.2*t7786*t7966;
  t8359 = t8355 + t8356 + t8357 + t8358;
  t8335 = 0.748*t7876;
  t8336 = -3.2*t7803*t8047;
  t8337 = -3.2*t7786*t8054;
  t8338 = t8335 + t8336 + t8337;
  t8385 = 0.748*t8063;
  t8386 = -3.2*t8023*t8067;
  t8387 = -3.2*t8012*t8074;
  t8388 = t8385 + t8386 + t8387;
  t8424 = 2.88*t714;
  t8425 = -6.8*t7876*t7899;
  t8426 = -3.2*t8054*t7909;
  t8427 = -3.2*t8047*t7922;
  t8428 = -6.8*t8063*t8085;
  t8429 = -3.2*t8074*t8095;
  t8430 = -3.2*t8067*t8099;
  t8431 = t8424 + t8425 + t8426 + t8427 + t8428 + t8429 + t8430;
  t8330 = 0.748*t7740;
  t8331 = -3.2*t7786*t7793;
  t8332 = -3.2*t7803*t2350;
  t8333 = t8330 + t8331 + t8332;
  t8380 = 0.748*t8003;
  t8381 = -3.2*t8012*t8018;
  t8382 = -3.2*t8023*t7987;
  t8383 = t8380 + t8381 + t8382;
  t8396 = -13.6*t7740*t7841;
  t8400 = -13.6*t8003*t8031;
  t8406 = -6.8*t7858;
  t8407 = -6.8*t7740*t7851;
  t8408 = -6.8*t7868;
  t8409 = -6.8*t7841*t7876;
  t8410 = -3.2*t8047*t7811;
  t8411 = -3.2*t8049;
  t8412 = -3.2*t8051;
  t8413 = -3.2*t8054*t7830;
  t8414 = -6.8*t8056;
  t8415 = -6.8*t8003*t8035;
  t8416 = -6.8*t8059;
  t8417 = -6.8*t8031*t8063;
  t8418 = -3.2*t8067*t8038;
  t8419 = -3.2*t8069;
  t8420 = -3.2*t8071;
  t8421 = -3.2*t8074*t8042;
  t8422 = t8406 + t8407 + t8408 + t8409 + t8410 + t8411 + t8412 + t8413 + t8414 + t8415 + t8416 + t8417 + t8418 + t8419 + t8420 + t8421;
  t8436 = 2.88*t2032;
  t8437 = -6.8*t7740*t7899;
  t8438 = -3.2*t7793*t7909;
  t8439 = -3.2*t2350*t7922;
  t8440 = -6.8*t8003*t8085;
  t8441 = -3.2*t8018*t8095;
  t8442 = -3.2*t7987*t8099;
  t8443 = t8436 + t8437 + t8438 + t8439 + t8440 + t8441 + t8442;
  t8468 = 3.2*t8023*t8158;
  t8469 = 3.2*t8012*t8165;
  t8470 = t8468 + t8469;
  t8471 = -0.5*var2[5]*t8470;
  t8315 = -0.5*var2[3]*t8228;
  t8316 = -0.5*var2[4]*t8238;
  t8317 = -0.5*var2[5]*t8302;
  t8318 = -0.5*var2[6]*t8311;
  t8319 = t8315 + t8316 + t8270 + t8317 + t8318;
  t8190 = -0.5*var2[3]*t7932;
  t8191 = -0.5*var2[4]*t7971;
  t8192 = -0.5*var2[5]*t8167;
  t8193 = -0.5*var2[6]*t8186;
  t8194 = t8190 + t8191 + t8102 + t8192 + t8193;
  t8377 = 0.384*var2[6]*t8180;
  t8480 = 3.2*t8116*t8095;
  t8481 = 3.2*t8112*t8099;
  t8482 = 3.2*t8023*t8180;
  t8483 = 3.2*t8012*t8184;
  t8484 = t8480 + t8481 + t8482 + t8483;
  t8349 = 6.4*t7918*t7922;
  t8350 = 6.4*t7909*t7930;
  t8351 = t8349 + t8350;
  t8366 = 6.4*t7922*t7962;
  t8367 = 6.4*t7909*t7966;
  t8368 = t8366 + t8367;
  t8474 = 6.4*t8158*t8099;
  t8475 = 6.4*t8095*t8165;
  t8476 = t8474 + t8475;
  t8493 = 6.4*t8099*t8180;
  t8494 = 6.4*t8095*t8184;
  t8495 = t8493 + t8494;
  t8206 = -0.5*var2[2]*t8205;
  t8214 = -0.5*var2[4]*t8213;
  t8215 = t8206 + t8210 + t8214;
  t7809 = -0.5*var2[2]*t7808;
  t7833 = -0.5*var2[4]*t7832;
  t7834 = t7809 + t7815 + t7833;
  t8523 = -3.2*t7786*t2350;
  t8524 = -3.2*t7803*t7890;
  t8525 = t8335 + t8523 + t8524;
  t8397 = -13.6*t7740*t7876;
  t8527 = -3.2*t7786*t7811;
  t8528 = -3.2*t7803*t4445;
  t8529 = t8330 + t8527 + t8528;
  t8451 = -13.6*t7851*t7841;
  t8548 = -3.2*t7811*t7793;
  t8549 = -3.2*t2350*t7830;
  t8550 = -3.2*t7811*t7890;
  t8551 = -3.2*t2350*t4445;
  t8552 = t8406 + t8407 + t8408 + t8409 + t8548 + t8549 + t8550 + t8551;
  t8531 = -3.2*t7803*t7918;
  t8532 = -3.2*t7786*t7930;
  t8533 = t8531 + t8532;
  t8554 = -3.2*t2350*t7909;
  t8555 = -3.2*t2350*t7918;
  t8556 = -3.2*t7922*t7890;
  t8557 = -3.2*t7793*t7930;
  t8558 = t8425 + t8554 + t8555 + t8556 + t8557;
  t8569 = -3.2*t7811*t7909;
  t8570 = -3.2*t7811*t7918;
  t8571 = -3.2*t7922*t4445;
  t8572 = -3.2*t7830*t7930;
  t8573 = t8437 + t8569 + t8570 + t8571 + t8572;
  t8508 = 6.4*t7822*t7786;
  t8509 = 6.4*t7818*t7803;
  t8510 = t8508 + t8509;
  t8360 = -0.5*var2[4]*t8359;
  t8361 = t8346 + t8360;
  t8326 = 0.384*var2[3]*t7918;
  t8328 = t8326 + t8327;
  t8197 = 0.384*var2[2]*t8047;
  t8198 = 0.384*var2[3]*t7890;
  t8200 = t8197 + t8198 + t8199;
  t8513 = -0.384*var2[1]*t7890;
  t8514 = -0.384*var2[0]*t4445;
  t8608 = 0.384*var2[1]*t7890;
  t8609 = 0.384*var2[0]*t4445;
  t2354 = 0.384*var2[2]*t2350;
  t5243 = 0.384*var2[3]*t4445;
  t7672 = t2354 + t5243 + t7004;
  t8542 = -0.384*var2[4]*t7890;
  t8622 = -3.2*t7822*t7793;
  t8623 = -3.2*t7818*t2350;
  t8624 = t8622 + t8623 + t8523 + t8524;
  t8544 = -6.4*t7793*t2350;
  t8545 = -6.4*t2350*t7890;
  t8562 = -0.384*var2[4]*t4445;
  t8626 = -3.2*t7818*t7811;
  t8627 = -3.2*t7822*t7830;
  t8628 = t8626 + t8527 + t8627 + t8528;
  t8564 = -6.4*t7811*t7830;
  t8565 = -6.4*t7811*t4445;
  t8641 = t8548 + t8549 + t8550 + t8551;
  t8630 = -3.2*t7822*t7909;
  t8631 = -3.2*t7818*t7922;
  t8632 = -3.2*t7803*t7962;
  t8633 = -3.2*t7786*t7966;
  t8634 = t8630 + t8631 + t8632 + t8633;
  t8643 = -3.2*t2350*t7962;
  t8644 = -3.2*t7793*t7966;
  t8645 = t8554 + t8643 + t8556 + t8644;
  t8653 = -3.2*t7811*t7962;
  t8654 = -3.2*t7830*t7966;
  t8655 = t8569 + t8653 + t8571 + t8654;
  t8273 = -0.5*var2[2]*t8253;
  t8281 = -0.5*var2[6]*t8280;
  t8282 = t8273 + t8277 + t8281;
  t8105 = -0.5*var2[2]*t8025;
  t8119 = -0.5*var2[6]*t8118;
  t8120 = t8105 + t8109 + t8119;
  t8687 = -3.2*t8012*t7987;
  t8688 = -3.2*t8023*t8139;
  t8689 = t8385 + t8687 + t8688;
  t8401 = -13.6*t8003*t8063;
  t8691 = -3.2*t8012*t8038;
  t8692 = -3.2*t8023*t7993;
  t8693 = t8380 + t8691 + t8692;
  t8454 = -13.6*t8035*t8031;
  t8712 = -3.2*t8038*t8018;
  t8713 = -3.2*t7987*t8042;
  t8714 = -3.2*t8038*t8139;
  t8715 = -3.2*t7987*t7993;
  t8716 = t8414 + t8415 + t8416 + t8417 + t8712 + t8713 + t8714 + t8715;
  t8695 = -3.2*t8023*t8158;
  t8696 = -3.2*t8012*t8165;
  t8697 = t8695 + t8696;
  t8718 = -3.2*t7987*t8095;
  t8719 = -3.2*t7987*t8158;
  t8720 = -3.2*t8099*t8139;
  t8721 = -3.2*t8018*t8165;
  t8722 = t8428 + t8718 + t8719 + t8720 + t8721;
  t8733 = -3.2*t8038*t8095;
  t8734 = -3.2*t8038*t8158;
  t8735 = -3.2*t8099*t7993;
  t8736 = -3.2*t8042*t8165;
  t8737 = t8440 + t8733 + t8734 + t8735 + t8736;
  t8672 = 6.4*t8116*t8012;
  t8673 = 6.4*t8112*t8023;
  t8674 = t8672 + t8673;
  t8485 = -0.5*var2[6]*t8484;
  t8486 = t8471 + t8485;
  t8376 = 0.384*var2[5]*t8158;
  t8378 = t8376 + t8377;
  t8242 = 0.384*var2[2]*t8067;
  t8243 = 0.384*var2[5]*t8139;
  t8245 = t8242 + t8243 + t8244;
  t8677 = -0.384*var2[1]*t8139;
  t8678 = -0.384*var2[0]*t7993;
  t8772 = 0.384*var2[1]*t8139;
  t8773 = 0.384*var2[0]*t7993;
  t7988 = 0.384*var2[2]*t7987;
  t7994 = 0.384*var2[5]*t7993;
  t7996 = t7988 + t7994 + t7995;
  t8706 = -0.384*var2[6]*t8139;
  t8786 = -3.2*t8116*t8018;
  t8787 = -3.2*t8112*t7987;
  t8788 = t8786 + t8787 + t8687 + t8688;
  t8708 = -6.4*t8018*t7987;
  t8709 = -6.4*t7987*t8139;
  t8726 = -0.384*var2[6]*t7993;
  t8790 = -3.2*t8112*t8038;
  t8791 = -3.2*t8116*t8042;
  t8792 = t8790 + t8691 + t8791 + t8692;
  t8728 = -6.4*t8038*t8042;
  t8729 = -6.4*t8038*t7993;
  t8805 = t8712 + t8713 + t8714 + t8715;
  t8794 = -3.2*t8116*t8095;
  t8795 = -3.2*t8112*t8099;
  t8796 = -3.2*t8023*t8180;
  t8797 = -3.2*t8012*t8184;
  t8798 = t8794 + t8795 + t8796 + t8797;
  t8807 = -3.2*t7987*t8180;
  t8808 = -3.2*t8018*t8184;
  t8809 = t8718 + t8807 + t8720 + t8808;
  t8817 = -3.2*t8038*t8180;
  t8818 = -3.2*t8042*t8184;
  t8819 = t8733 + t8817 + t8735 + t8818;
  p_output1[0]=-1.*t8146*var2[1] - 1.*t8194*var2[2] - 1.*t7834*var2[3] - 1.*(t7004 + t7815 - 0.5*t7855*var2[0] - 0.5*t7893*var2[1] - 0.5*t7932*var2[2])*var2[3] - 1.*t7672*var2[4] - 1.*(t7004 - 0.5*t7940*var2[0] - 0.5*t7950*var2[1] - 0.5*t7971*var2[2] - 0.5*t7832*var2[3])*var2[4] - 1.*t8120*var2[5] - 1.*(t7995 + t8109 - 0.5*t8129*var2[0] - 0.5*t8144*var2[1] - 0.5*t8167*var2[2])*var2[5] - 1.*t7996*var2[6] - 1.*(t7995 - 0.5*t8127*var2[0] - 0.5*t8142*var2[1] - 0.5*t8186*var2[2] - 0.5*t8118*var2[5])*var2[6] - 1.*var2[2]*(t8102 - 0.5*t8044*var2[0] - 0.5*t8076*var2[1] - 0.5*t7808*var2[3] + 0.384*t2350*var2[4] - 0.5*t8025*var2[5] + 0.384*t7987*var2[6]) - 1.*var2[0]*(-0.5*t8044*var2[2] - 0.5*t7855*var2[3] - 0.5*t7940*var2[4] - 0.5*t8129*var2[5] - 0.5*t8127*var2[6]);
  p_output1[1]=0. - 1.*t8146*var2[0] - 1.*t8319*var2[2] - 1.*t8215*var2[3] - 1.*(t8199 + t8210 - 0.5*t7893*var2[0] - 0.5*t8220*var2[1] - 0.5*t8228*var2[2])*var2[3] - 1.*t8200*var2[4] - 1.*(t8199 - 0.5*t7950*var2[0] - 0.5*t8233*var2[1] - 0.5*t8238*var2[2] - 0.5*t8213*var2[3])*var2[4] - 1.*t8282*var2[5] - 1.*(t8244 + t8277 - 0.5*t8144*var2[0] - 0.5*t8291*var2[1] - 0.5*t8302*var2[2])*var2[5] - 1.*t8245*var2[6] - 1.*(t8244 - 0.5*t8142*var2[0] - 0.5*t8289*var2[1] - 0.5*t8311*var2[2] - 0.5*t8280*var2[5])*var2[6] - 1.*var2[2]*(t8270 - 0.5*t8076*var2[0] - 0.5*t8260*var2[1] - 0.5*t8205*var2[3] + 0.384*t8047*var2[4] - 0.5*t8253*var2[5] + 0.384*t8067*var2[6]) - 1.*var2[1]*(-0.5*t8260*var2[2] - 0.5*t8220*var2[3] - 0.5*t8233*var2[4] - 0.5*t8291*var2[5] - 0.5*t8289*var2[6]);
  p_output1[2]=0. - 1.*t8194*var2[0] - 1.*t8319*var2[1] - 1.*(-0.5*t8101*var2[0] - 0.5*t8269*var2[1])*var2[2] - 1.*(-0.5*t8443*var2[0] - 0.5*t8431*var2[1])*var2[2] - 1.*t8361*var2[3] - 1.*(-0.5*t8333*var2[0] - 0.5*t8338*var2[1])*var2[3] - 1.*t8328*var2[4] - 1.*(-0.384*t2350*var2[0] - 0.384*t8047*var2[1])*var2[4] - 1.*(t8327 - 0.5*t7971*var2[0] - 0.5*t8238*var2[1] - 0.5*t8368*var2[2] - 0.5*t8359*var2[3])*var2[4] - 1.*var2[3]*(t8346 - 0.5*t7932*var2[0] - 0.5*t8228*var2[1] - 0.5*t8351*var2[2] + 0.384*t7918*var2[4]) - 1.*t8486*var2[5] - 1.*(-0.5*t8383*var2[0] - 0.5*t8388*var2[1])*var2[5] - 1.*t8378*var2[6] - 1.*(-0.384*t7987*var2[0] - 0.384*t8067*var2[1])*var2[6] - 1.*(t8377 - 0.5*t8186*var2[0] - 0.5*t8311*var2[1] - 0.5*t8495*var2[2] - 0.5*t8484*var2[5])*var2[6] - 1.*var2[0]*(-0.5*(-6.4*t2350*t7811 - 6.4*t7793*t7830 - 6.4*t7987*t8038 - 6.4*t8018*t8042 + t8396 + t8400 + t8451 + t8454)*var2[0] - 0.5*t8422*var2[1] - 0.5*t8443*var2[2] - 0.5*t8333*var2[3] - 0.384*t2350*var2[4] - 0.5*t8383*var2[5] - 0.384*t7987*var2[6]) - 1.*var2[1]*(-0.5*t8422*var2[0] - 0.5*(-6.4*t2350*t8047 - 6.4*t7793*t8054 - 6.4*t7987*t8067 - 6.4*t8018*t8074 + t8396 + t8397 + t8400 + t8401)*var2[1] - 0.5*t8431*var2[2] - 0.5*t8338*var2[3] - 0.384*t8047*var2[4] - 0.5*t8388*var2[5] - 0.384*t8067*var2[6]) - 1.*var2[5]*(t8471 - 0.5*t8167*var2[0] - 0.5*t8302*var2[1] - 0.5*t8476*var2[2] + 0.384*t8158*var2[6]) - 1.*var2[2]*(-0.5*t8351*var2[3] - 0.5*t8368*var2[4] - 0.5*t8476*var2[5] - 0.5*t8495*var2[6]);
  p_output1[3]=0. - 1.*t7834*var2[0] - 1.*t8215*var2[1] - 1.*t8361*var2[2] - 1.*(-0.5*t7808*var2[0] - 0.5*t8205*var2[1])*var2[2] - 1.*(-0.5*t7814*var2[0] - 0.5*t8209*var2[1] - 0.5*t8345*var2[2])*var2[3] - 1.*(-0.5*t8529*var2[0] - 0.5*t8525*var2[1] - 0.5*t8533*var2[2])*var2[3] - 1.*var2[1]*(t8542 - 0.5*t8552*var2[0] - 0.5*(t8396 + t8397 + t8544 + t8545)*var2[1] - 0.5*t8558*var2[2] - 0.5*t8525*var2[3]) - 1.*var2[0]*(t8562 - 0.5*(t8396 + t8451 + t8564 + t8565)*var2[0] - 0.5*t8552*var2[1] - 0.5*t8573*var2[2] - 0.5*t8529*var2[3]) - 1.*(t8513 + t8514 - 0.384*t7918*var2[2])*var2[4] + 0.5*t8510*var2[3]*var2[4] - 0.384*t7818*Power(var2[4],2) - 1.*var2[4]*(-0.5*t7832*var2[0] - 0.5*t8213*var2[1] - 0.5*t8359*var2[2] - 0.5*t8510*var2[3] + 0.384*t7818*var2[4]) - 1.*var2[2]*(-0.5*t8573*var2[0] - 0.5*t8558*var2[1] - 0.5*(-6.4*t7918*t7922 - 6.4*t7909*t7930)*var2[2] - 0.5*t8533*var2[3] - 0.384*t7918*var2[4]);
  p_output1[4]=0. - 1.*t7672*var2[0] - 1.*t8200*var2[1] - 1.*t8328*var2[2] - 1.*(0.384*t2350*var2[0] + 0.384*t8047*var2[1])*var2[2] - 1.*(t8608 + t8609 + 0.384*t7918*var2[2])*var2[3] - 1.*var2[1]*(t8542 - 0.5*t8641*var2[0] - 0.5*(t8544 + t8545)*var2[1] - 0.5*t8645*var2[2] - 0.5*t8624*var2[3]) - 1.*var2[0]*(t8562 - 0.5*(t8564 + t8565)*var2[0] - 0.5*t8641*var2[1] - 0.5*t8655*var2[2] - 0.5*t8628*var2[3]) - 0.384*t7818*var2[3]*var2[4] - 1.*(t8513 + t8514 - 0.384*t7962*var2[2] - 0.384*t7818*var2[3])*var2[4] - 1.*(t8608 + t8609 + 0.384*t7962*var2[2] + 0.384*t7818*var2[3])*var2[4] - 1.*var2[3]*(-0.5*t8628*var2[0] - 0.5*t8624*var2[1] - 0.5*t8634*var2[2] - 0.5*(-6.4*t7803*t7818 - 6.4*t7786*t7822)*var2[3] - 0.384*t7818*var2[4]) - 1.*var2[2]*(-0.5*t8655*var2[0] - 0.5*t8645*var2[1] - 0.5*(-6.4*t7922*t7962 - 6.4*t7909*t7966)*var2[2] - 0.5*t8634*var2[3] - 0.384*t7962*var2[4]);
  p_output1[5]=0. - 1.*t8120*var2[0] - 1.*t8282*var2[1] - 1.*t8486*var2[2] - 1.*(-0.5*t8025*var2[0] - 0.5*t8253*var2[1])*var2[2] - 1.*(-0.5*t8108*var2[0] - 0.5*t8276*var2[1] - 0.5*t8470*var2[2])*var2[5] - 1.*(-0.5*t8693*var2[0] - 0.5*t8689*var2[1] - 0.5*t8697*var2[2])*var2[5] - 1.*var2[1]*(t8706 - 0.5*t8716*var2[0] - 0.5*(t8400 + t8401 + t8708 + t8709)*var2[1] - 0.5*t8722*var2[2] - 0.5*t8689*var2[5]) - 1.*var2[0]*(t8726 - 0.5*(t8400 + t8454 + t8728 + t8729)*var2[0] - 0.5*t8716*var2[1] - 0.5*t8737*var2[2] - 0.5*t8693*var2[5]) - 1.*(t8677 + t8678 - 0.384*t8158*var2[2])*var2[6] + 0.5*t8674*var2[5]*var2[6] - 0.384*t8112*Power(var2[6],2) - 1.*var2[6]*(-0.5*t8118*var2[0] - 0.5*t8280*var2[1] - 0.5*t8484*var2[2] - 0.5*t8674*var2[5] + 0.384*t8112*var2[6]) - 1.*var2[2]*(-0.5*t8737*var2[0] - 0.5*t8722*var2[1] - 0.5*(-6.4*t8099*t8158 - 6.4*t8095*t8165)*var2[2] - 0.5*t8697*var2[5] - 0.384*t8158*var2[6]);
  p_output1[6]=0. - 1.*t7996*var2[0] - 1.*t8245*var2[1] - 1.*t8378*var2[2] - 1.*(0.384*t7987*var2[0] + 0.384*t8067*var2[1])*var2[2] - 1.*(t8772 + t8773 + 0.384*t8158*var2[2])*var2[5] - 1.*var2[1]*(t8706 - 0.5*t8805*var2[0] - 0.5*(t8708 + t8709)*var2[1] - 0.5*t8809*var2[2] - 0.5*t8788*var2[5]) - 1.*var2[0]*(t8726 - 0.5*(t8728 + t8729)*var2[0] - 0.5*t8805*var2[1] - 0.5*t8819*var2[2] - 0.5*t8792*var2[5]) - 0.384*t8112*var2[5]*var2[6] - 1.*(t8677 + t8678 - 0.384*t8180*var2[2] - 0.384*t8112*var2[5])*var2[6] - 1.*(t8772 + t8773 + 0.384*t8180*var2[2] + 0.384*t8112*var2[5])*var2[6] - 1.*var2[5]*(-0.5*t8792*var2[0] - 0.5*t8788*var2[1] - 0.5*t8798*var2[2] - 0.5*(-6.4*t8023*t8112 - 6.4*t8012*t8116)*var2[5] - 0.384*t8112*var2[6]) - 1.*var2[2]*(-0.5*t8819*var2[0] - 0.5*t8809*var2[1] - 0.5*(-6.4*t8099*t8180 - 6.4*t8095*t8184)*var2[2] - 0.5*t8798*var2[5] - 0.384*t8180*var2[6]);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 7, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "CoriolisTerm_mex.hh"

namespace SymExpression
{

void CoriolisTerm_mex_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
